@startuml connect4_classNotation_classdiagram

package "console-mpds" <<Rectangle>> #ccc {
    class console {
        writeln(text)
        readString(question)
        readNumber(question)
    }
}

package "Types" <<Rectangle>> #aca {
    class Color {
        {static} RED
        {static} GREEN
        {static} YELLOW
        {static} BLUE
        {static} MAGENTA
        {static} CHESTNUT
        {static} NULL
        -string;
        constructor(string) 
        {static} values()
        {static} get(ordinal)
        {static} getRandomColor()
        {static} validateColorCode(colorCode)
        {static} colorsCodeToString()
        getCode()
    }
}

package "Models" <<Rectangle>> #aca {

    class Board {
        MAX_ATTEMPTS
        -secretCombination
        -proposedCombination
        -proposedCombinations
        -results
        constructor(numOfPlayers)
        getSecretCombination()
        newLastProposedCombination()
        getLastProposedCombination()
        getProposedCombination(position)
        getProposedCombinationsLength()
        getResult(position)
        setResult()
        getBlacksAndWhites()
        isLastProposedCombinationAWinner()
        isComplete()
    }

    class Combination {
        {static} COMBINATION_LENGTH
        -value
        constructor()
        getLength()
        setValue(value)
        getValue()
        validateLength()
        validateColors()
        validateUniqueColors()
        getRandomColor()
    }

    class Game {
        {static} STATES
        -board
        -state
        constructor(numPlayers)
        getBoard()
        checkEnd()
        getState()
        setResult()
    }

    class MinimaxProposedCombination extends Combination {
        -impossibleCombination
        -possibleCombination
        constructor()
        accept(visitor)
        setCombination()
        -getInitialMinMaxTable()
        setResult(result)
        {static} getAllCombinations()
        clone()
    }

    class RandomCombination extends Combination{
        constructor()
        accept(visitor)
        setCombination()
    }

    class RandomSecretCombination extends RandomCombination{
        constructor()
        accept(visitor)
    }

    class UserCombination extends Combination{
        constructor()
        accept(visitor)
    }

    class UserProposedCombination extends UserCombination{
        constructor()
        accept(visitor)
        clone()
    }

    class UserSecretCombination extends UserCombination{
        constructor()
        accept(visitor)
    }

    class Result {
        -blacks
        -whites
        -isWinner
        constructor()
        addWhites()
        addBlacks()
        getBlacks()
        getWhites()
        setWinner(combinationLength)
        isWinner()
        equals(result)
        {static} checkBlacksAndWhites(secretCombination, combination)
        {static} hasColor(combination, color)
    }
}

package "Views" <<Rectangle>> #caa {
    class BoardView{
        -board
        -console
        constructor(board,console)
        setSecretCombination()
        visitRandomSecretCombination()
        visitUserSecretCombination()
        getProposedCombination()
        visitMinimaxProposedCombination()
        visitUserProposedCombination()
        writeAttempts()
        -writeLine(position)
    }

    class CombinationView {
        -message
        -combination
        -console
        constructor(console, combination, message)
        readValue()
        checkErrors()
    }

    class ConsoleView {
        -console
        writeln(text)
        readString(question)
        readNumber(question)
    }

    class GameView {
        -game
        -boardView
        -console
        constructor(numPlayers, console)
        writeFinish()
        play()
    }

    class MastermindView {
        -continueDialog
        -numPlayersMenu
        -console
        constructor(console)
        play()
    }

    class NumPlayersMenu extends Menu {
        constructor(console)
        read()
    }

    class YesNoDialog {
        -question
        -answer
        -console
        constructor(question, console)
        read()
        isAffirmative()
        isNegative()
    }

    class Option {
        -title
        -value
        constructor(title, value) 
        getValue()
        getTitle()
    }

    class Menu {
        -console
        -title
        -options
        -answer
        constructor(title, console)
        add(option)
        interact()
        show()
        -showTitle()
        execChoosedOption()
        -readInt(prompt)
        getChoosedOptionValue()
    }
}

Board *-down-> RandomSecretCombination
Board *-down-> MinimaxProposedCombination
Board *-down-> UserSecretCombination
Board *-down-> UserProposedCombination
Board *-right-> Result
Board -down[hidden]-> Combination

Combination -d-> Color

MinimaxProposedCombination -> Color
MinimaxProposedCombination -> Result

Game *-down-> Board

BoardView -> Board
BoardView *-down-> CombinationView

CombinationView -> Combination
CombinationView -d-> Color

GameView *-> Game
GameView *-down-> BoardView

MastermindView -> YesNoDialog
MastermindView -> NumPlayersMenu
MastermindView *-down-> GameView
MastermindView -left[hidden]-> Menu

Menu --> Option
NumPlayersMenu *-> Option

MastermindView .-down-> ConsoleView
GameView .-down-> ConsoleView
BoardView .-down-> ConsoleView
CombinationView .-down-> ConsoleView
YesNoDialog .-down-> ConsoleView
Menu .-down-> ConsoleView

ConsoleView -down-> console

app *-down-> MastermindView

@enduml