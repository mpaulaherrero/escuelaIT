@startuml connect4_classNotation_classdiagram

package "console-mpds" <<Rectangle>> #ccc {
    class console {
        writeln(text)
        readString(question)
        readNumber(question)
    }
}

package "Types" <<Rectangle>> #aca {
    class Coordinate {
        {static} MIN_COLUMNS
        {static} MAX_COLUMNS
        {static} MAX_ROWS
        -row
        -column
        constructor(row, column)
        shifted(coordinate)
        toString()
        isValid()
        getOposite()
        getRow()
        getColumn()
        setRow(value)
        setColumn(value)
        clone()
    }

    class Direction {
        {static} NORTH
        {static} NORTH_EAST
        {static} EAST
        {static} SOUTH_EAST
        -name
        -coordinate
        constructor(name, coordinate)
        {static} getValues()
        toString()
        getOpositeCoordinate()
        getCoordinate()
        clone()
    }

    class Color {
        {static} RED
        {static} YELLOW
        {static} NULL
        -string;
        constructor(string) 
        {static} values()
        {static} get(ordinal)
        getCode()
        getOpposite()
        #ordinal()
    }    
}    

package "Utils" <<Rectangle>> #aca {
    class assert
    class logger
}   

package "Models" <<Rectangle>> #aca {

    class Board {
        -tokens
        -lastCoordinate
        -winnerLine
        constructor()
        getMaxRows()
        getMaxColumns()
        getLastCoordinate()
        getWinnerLine()
        setLastCoordinate(lastCoordinate)
        setTokens(tokens)
        setWinnerLine(winnerLine)
        getToken(row, column)
        isLastCoordinateColumnEmpty()
        putLastCoordinate(token)
        putCoordinate(column, token)
        isComplete()
        isColumnEmpty(column)
        getEmptyColumns()
        isLastTokenInLine()
        -checkLastTokenInLine() 
        -isInLine(line)
        isFinished()
        toString()
        clone()
    }

    class Game {
        -board
        -turn
        constructor(numPlayers)
        getBoard()
        getTurn()
        isFinished()
        isWinner()
        getWinnerToken()
        nextTurn()
    }

    class Line {
        {static} LENGTH
        -direction
        -coordinates
        constructor (origenCoordinate, direction)
        toString()
        shift()
        getCoordinates()
        clone()
    }

    class Player{
        -color
        board
        constructor(indexColor,board)
        getColor()
        getBoard()
        isCoordinateColumnEmpty()
        getCoordinate()
        putCoordinate()
    }

    class UserPlayer extends Player{
        constructor(indexColor,board)
        accept(visitor) 
    }

    class MachinePlayer extends Player{
        constructor(indexColor,board)
        accept(visitor)
        setColumn()
    }    

    class RandomMachinePlayer extends MachinePlayer{
        constructor(indexColor, board)
        accept(visitor)    
        setColumn()
    }  

    class MinimaxMachinePlayer extends MachinePlayer{
        constructor(indexColor, board)
        accept(visitor)
        setColumn()
    }  

    class Minimax {
        {static} -MAX_STEPS
        {static} -MAX_COST
        {static} -MIN_COST
        {static} -MAX_LIMIT 
        color
        -lowerLimit
        -opposite
        -bestScoreToken
        constructor(color, lowerLimit, isMainPlayer)
        setOpposite(opposite)
        getCost(steps, board)
        nextCost(cost, nextMoveCost)
        -isEnd(steps, board)
        -getEndCost(board, cost)
        -getBestScore(board)
        -getInLinePoint(board,line)
    }

    class MaxPlayer extends Minimax {
        constructor(color)
        nextCost(maxCost, minCost, column)
    }

    class MinPlayer extends Minimax {
        constructor(color)
        nextCost(minCost, maxCost, column)
    }

    class MinimaxCost {
        -column
        -value

        constructor(value)
        setColumn(column)
        getColumn()
        setValue(value)
        getValue()
    }

    class Turn{
        {static} NUMBER_PLAYERS
        -players
        -activePlayer
        constructor(board, numOfPlayers)
        next()
        getToken()
        getActivePlayer()
    }
}

package "Views" <<Rectangle>> #caa {
    class BoardView{
        -board
        -console
        constructor(board,console)
        writeTokens()
    }

    class Connect4View {
        -continueDialog
        -numPlayersMenu
        -console
        constructor(console)
        play()
    }

    class CoordinateView {
        -coordinate
        -console
        constructor(coordinate, console)
        -read(title)
        readColumn()
    }

    class GameView {
        -game
        -boardView
        -console
        constructor(numPlayers, console)
        writeFinish()
        play()
    }

    class PlayerView {
        -player
        -console
        constructor(player, console) 
        playTurn()
        putToken(message)
        visitUserPlayer()
        visitMachinePlayer()
        visitMinimaxMachinePlayer()
    }

    class YesNoDialog {
        -question
        -answer
        -console
        constructor(question, console)
        read()
        isAffirmative()
        isNegative()
    }

    class Option {
        -title
        -value
        constructor(title, value) 
        getValue()
        getTitle()
    }

    class Menu {
        -console
        -title
        -options
        -answer
        constructor(title, console)
        add(option)
        interact()
        show()
        -showTitle()
        execChoosedOption()
        -readInt(prompt)
        getChoosedOptionValue()
    }

    class NumPlayersMenu extends Menu {
        constructor(console)
        read()
    }

    class ConsoleView {
        writeln(text)
        readString(question)
        readNumber(question)
    }   

    class ConsoleNode extends ConsoleView {
        -console
        writeln(text)
        readString(question)
        readNumber(question)
    }

    class ConsoleBrowser extends ConsoleView {
        -documentBody
        constructor()
        writeln(text)
        readString(question)
        readNumber(question)
    }

}

Direction *-down-> Coordinate

Line -down-> "4" Coordinate
Line -down-> Direction

Board -down-> Coordinate
Board -down-> Direction
Board -down-> Line
Board -down-> Color

Player -down-> Color

RandomMachinePlayer --> Coordinate

MinimaxMachinePlayer *-d-> MaxPlayer
MinimaxMachinePlayer *-d-> MinPlayer

Minimax -d-> Line
Minimax -d-> Coordinate
Minimax -d-> Direction
Minimax *-d-> MinimaxCost
Minimax --> assert

UserPlayer --> assert

Turn *-down-> "2" Player
Turn .-> Board

Player -r-> Board

Game *-down-> Board
Game *-down-> Turn

CoordinateView -> Coordinate

BoardView -down-> Board

PlayerView -down-> Player
PlayerView *-down-> CoordinateView

GameView *-down-> Game
GameView *-down-> BoardView
GameView *-down-> PlayerView

Connect4View -down-> YesNoDialog
Connect4View -down-> NumPlayersMenu
Connect4View *-down-> GameView

Menu --> Option
NumPlayersMenu *-down-> Option

Connect4View .-down-> ConsoleView
YesNoDialog .-right-> ConsoleView
GameView .-down-> ConsoleView
BoardView .-down-> ConsoleView
PlayerView .-down-> ConsoleView
CoordinateView .-right-> ConsoleView
Menu .-down-> ConsoleView

ConsoleNode -down-> console

app *-> ConsoleNode
app *-> Connect4View
appBrowser *-> ConsoleBrowser
appBrowser *-> Connect4View

@enduml